#!/usr/bin/env php
<?php

include(__DIR__ . '/../webdata/init.inc.php');

function error($message)
{
    error_log($message);
    die();
}

function main()
{
    if (!getenv('SSH_ORIGINAL_COMMAND')) {
        return error('There is no SSH_ORIGINAL_COMMAND env');
    }

    $command = getenv('SSH_ORIGINAL_COMMAND');
    list($method) = explode(' ', $command, 2);
    switch ($method) {
    case 'init':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id) {
            echo json_encode(array('error' => true, 'message' => 'id is not found'));
            break;
        }
        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }
        exec("rm -rf /srv/chroot/{$id}");
        mkdir("/srv/chroot/{$id}");
        exec("tar zxf /srv/code/images/template.tgz -C /srv/chroot/{$id}");
        exec("mknod /srv/chroot/{$id}/dev/null c 1 3");
        exec("mknod /srv/chroot/{$id}/dev/random c 1 8");
        exec("mknod /srv/chroot/{$id}/dev/urandom c 1 9");
        exec("mknod /srv/chroot/{$id}/dev/stdin c 5 0");
        exec("mknod /srv/chroot/{$id}/dev/stdout c 5 1");
        exec("mknod /srv/chroot/{$id}/dev/stderr c 5 2");
        exec("chmod 666 /srv/chroot/{$id}/dev/*");
        exec("chown -R deploy:nogroup /srv/chroot/{$id}");
        exec("chmod 755 /srv/chroot/{$id}");
        exec("mkdir /srv/chroot/{$id}/tmp");
        exec("chmod 1777 /srv/chroot/{$id}/tmp");
        $port = $uid = 20000 + $id;
        exec("echo -e 'www-user:x:{$uid}:99::/srv/deploy:/sbin/nologin' >> /srv/chroot/{$id}/etc/passwd");
        mkdir("/srv/chroot/{$id}/srv/logs");
        exec("chown {$uid} /srv/chroot/{$id}/srv/logs");
        echo json_encode(array('error' => false, 'port' => $port));
        break;

    case 'service':
        list(, $id, $template, $option) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            die("invalid $id");
        }
        if (!file_exists('/srv/code/images/' . $template)) {
            die("template {$template} not found");
        }
        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }
        exec("rpm --root /srv/chroot/{$id} -ivh --nodeps /srv/code/images/{$template}/*");
        if (file_exists("/srv/code/hisoku/config/rpmsource/{$template}-config")) {
            exec("cp -r /srv/code/hisoku/config/rpmsource/{$template}-config/* /srv/chroot/{$id}/");
        }
        $uid = $port = 20000 + $id;
        $option = urldecode($option);

        if (file_exists("/srv/chroot/{$id}/init.sh")) {
            exec("chroot /srv/chroot/{$id}/ /init.sh {$port} {$option}");
        }

        exec("chroot --userspec={$uid}:99 /srv/chroot/{$id}/ /start.sh {$port} {$option}");
        break;

    case 'clone':
        list(, $project_name, $id, $flag) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id) {
            die("invalid $id");
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }
        $template = $project->getTemplate();
        exec("dpkg --root=/srv/chroot/{$id} -i /srv/code/images/{$template}/*.deb");
        exec("cp -r /srv/code/hisoku/config/rpmsource/{$template}-config/* /srv/chroot/{$id}/");
        $port = 20000 + $id;
        exec("chroot /srv/chroot/{$id}/ /init.sh {$port}");
        mkdir("/srv/chroot/{$id}/srv/web");
        exec("git archive --format=tar --remote=git@" . GIT_PRIVATE_SERVER . ":{$project_name}.git master | tar -xf - -C /srv/chroot/{$id}/srv/web");
        if ('python26' == $template) {
            $tmp_name = tempnam('/tmp', '') . '.tar.gz';
            exec("ssh git@" . GIT_PRIVATE_SERVER . " get-python-package " . $project_name . " > " . $tmp_name);
            mkdir("/srv/chroot/{$id}/tmp/pip-build");
            exec("tar zxvf " . $tmp_name . " -C /srv/chroot/{$id}/tmp/pip-build");
            unlink($tmp_name);
        }
        if ('no-post-clone' != $flag and file_exists("/srv/chroot/{$id}/post-clone.sh")) {
            exec("chroot /srv/chroot/{$id}/ /post-clone.sh {$port}");
        }
        break;

    case 'restart-web':
        list(, $project_name, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }

        $params = array('project=' . escapeshellcmd($project->name));
        foreach ($project->variables as $variable) {
            $params[] = escapeshellcmd($variable->key) . '=' . escapeshellarg($variable->value);
        }
        $uid = 20000 + $id;
        exec("chroot --userspec={$uid}:99 /srv/chroot/{$id}/ env -i " . implode(" ", $params) . " /start-web.sh");
        break;

    case 'run':
        list(, $project_name, $id, $run_cmd) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        $params = array('project=' . escapeshellarg($project->name));
        foreach ($project->variables as $variable) {
            $params[] = escapeshellarg($variable->key) . '=' . escapeshellarg($variable->value);
        }
        $run_cmd = 'cd /srv/web; ' . urldecode($run_cmd);

        $uid = 20000 + $id;
	$cmd = "chroot --userspec={$uid}:99 /srv/chroot/{$id}/ env -i " . implode(" ", $params) . " sh -c " . escapeshellarg($run_cmd);
        passthru($cmd);
        break;

    case 'check_alive':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        $uid = 20000 + $id;
        $output = trim(`ps -u {$uid} -opid | grep -v PID`);
        if ('' == $output) {
            echo json_encode(array());
            return;
        }
        $pids = explode("\n", $output);
        $jobs = array();
        foreach ($pids as $pid) {
            $pid = trim($pid);
            $job = new StdClass;
            $job->pid = $pid;
            $job->start_time = filectime("/proc/{$pid}");
            $job->comm = trim(file_get_contents("/proc/{$pid}/comm"));
            $job->cmdline = trim(file_get_contents("/proc/{$pid}/cmdline"));
            $jobs[] = $job;
        }
        echo json_encode($jobs);
        break;

    case 'shutdown':
        list(, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }
        $uid = 20000 + $id;
        $output = trim(`ps -u {$uid} -opid | grep -v PID`);
        if ('' !== trim($output)) {
            $pids = explode("\n", $output);
            exec("kill " . implode(' ', $pids));
        }
        exec("rm -rf /srv/chroot/{$id}");
        echo json_encode(array('error' => false, 'port' => $port));
        break;

    default:
        return error('unknown command: ' . $method);
    }
    return;

}

main();
