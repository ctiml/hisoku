#!/usr/bin/env php
<?php

include(__DIR__ . '/../webdata/init.inc.php');

function error($message)
{
    error_log($message);
    die();
}

function main()
{
    if (!getenv('SSH_ORIGINAL_COMMAND')) {
        return error('There is no SSH_ORIGINAL_COMMAND env');
    }

    $command = getenv('SSH_ORIGINAL_COMMAND');
    list($method) = explode(' ', $command, 2);
    switch ($method) {
    case 'init':
        list(, $id, $template) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id) {
            echo json_encode(array('error' => true, 'message' => 'id is not found'));
            break;
        }

        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }
        exec("rm -rf /srv/chroot/{$id}/");
        exec("cp --preserve=mode,ownership,timestamps --recursive /srv/chroot/template /srv/chroot/{$id}");
        exec("mknod /srv/chroot/{$id}/dev/null c 1 3");
        exec("mknod /srv/chroot/{$id}/dev/random c 1 8");
        exec("mknod /srv/chroot/{$id}/dev/urandom c 1 9");
        exec("chmod 666 /srv/chroot/{$id}/dev/*");
        exec("chown 10003:99 /srv/chroot/{$id}/srv");
        exec("chown 10003:99 /srv/chroot/{$id}/var/run");

        $port = 20000 + $id;
        exec("chroot /srv/chroot/{$id}/ /init.sh {$port}");
        echo json_encode(array('error' => false, 'port' => $port));
        break;

    case 'clone':
        list(, $project_name, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id) {
            die("invalid $id");
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        exec("rm -rf /srv/chroot/{$id}/srv/web");
	mkdir("/srv/chroot/{$id}/srv/web");
        exec("git archive --format=tar --remote=git@" . GIT_PRIVATE_SERVER . ":{$project_name}.git master | tar -xf - -C /srv/chroot/{$id}/srv/web");
        break;

    case 'restart-web':
        list(, $project_name, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }

        $params = array('project=' . escapeshellcmd($project->name));
        foreach ($project->variables as $variable) {
            $params[] = escapeshellcmd($variable->key) . '=' . escapeshellcmd($variable->value);
        }
        exec("chroot --userspec=10003:99 /srv/chroot/{$id}/ env -i " . implode(" ", $params) . " /start-web.sh app-{$project->getLoggerCategory()} ");
        break;

    case 'run':
        list(, $project_name, $id, $run_cmd) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        $params = array('project=' . escapeshellarg($project->name));
        foreach ($project->variables as $variable) {
            $params[] = escapeshellarg($variable->key) . '=' . escapeshellarg($variable->value);
        }
        $run_cmd = urldecode($run_cmd);

	$cmd = "chroot --userspec=10003:99 /srv/chroot/{$id}/ env -i " . implode(" ", $params) . " sh -c " . escapeshellarg($run_cmd);
	passthru($cmd . ' | /srv/code/hisoku/scripts/processlogger app-' . escapeshellarg($project->getLoggerCategory()) . ' run > /dev/null 2>&1 & ');
        break;


    case 'shutdown':
        list(, $id, $template) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        exec("chroot --userspec=10003:99 /srv/chroot/{$id}/ /shutdown.sh");
        exec("rm -rf /srv/chroot/{$id}");
        break;

    default:
        return error('unknown command: ' . $method);
    }
    return;

}

main();
