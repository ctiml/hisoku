#!/usr/bin/env php
<?php

include(__DIR__ . '/../webdata/init.inc.php');

function error($message)
{
    error_log($message);
    die();
}

function main()
{
    if (!getenv('SSH_ORIGINAL_COMMAND')) {
        return error('There is no SSH_ORIGINAL_COMMAND env');
    }

    $command = getenv('SSH_ORIGINAL_COMMAND');
    list($method) = explode(' ', $command, 2);
    switch ($method) {
    case 'init':
        list(, $id, $template) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (file_exists("/srv/chroot/{$id}/shutdown.sh")) {
            exec("chroot /srv/chroot/{$id}/ /shutdown.sh");
        }
        exec("rm -rf /srv/chroot/{$id}/");
        exec("cp --preserve=mode,ownership,timestamps --recursive /srv/chroot/template /srv/chroot/{$id}");
        exec("mknod /srv/chroot/{$id}/dev/null c 1 3");
        exec("mknod /srv/chroot/{$id}/dev/random c 1 8");
        exec("mknod /srv/chroot/{$id}/dev/urandom c 1 9");
        exec("chmod 666 /srv/chroot/{$id}/dev/*");

        $port = 20000 + $id;
        exec("chroot /srv/chroot/{$id}/ /init.sh {$port}");
        break;

    case 'clone':
        list(, $project_name, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id) {
            die("invalid $id");
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        exec("rm -rf /srv/chroot/{$id}/srv/web");
	mkdir("/srv/chroot/{$id}/srv/web");
        exec("git archive --format=tar --remote=git@" . GIT_SERVER . ":{$project_name}.git master | tar -xf - -C /srv/chroot/{$id}/srv/web");
        break;

    case 'restart-web':
        list(, $project_name, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id = intval($id)) {
            error('invalid id: ' . $id);
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }

        $params = array('project=' . escapeshellcmd($project->name));
        foreach ($project->variables as $variable) {
            $params[] = escapeshellcmd($variable->key) . '=' . escapeshellcmd($variable->value);
        }
        exec("chroot --userspec=10003:99 /srv/chroot/{$id}/ env -i " . implode(" ", $params) . " /start-web.sh {$project->getLoggerCategory()} ");
        break;

    case 'shutdown':
        list(, $nodes_count) = explode(' ', $command, 2);
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, 'http://169.254.169.254/latest/meta-data/local-hostname');
        curl_setopt($curl, CURLOPT_HEADER, 0);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        if (!$hostname = curl_exec($curl)) {
            trigger_error(curl_error($curl));
        }
        curl_close($curl);

        if (!$hostname) {
            die("local-hostname is not found");
        }

        if (!$ip = gethostbyname($hostname)) {
            die("local-hostname {$hostname} error");
        }

        for ($i = 1; $i <= $nodes_count; $i ++) {
            if ($node = WebNode::find(array(ip2long($ip), 20000 + $i))) {
                $node->delete();
            }

            exec("chroot --userspec=10003:99 /srv/chroot/{$id}/ /shutdown.sh");
            exec("rm -rf /srv/chroot/{$i}");
        }
        break;

    }
    return;
}

main();
