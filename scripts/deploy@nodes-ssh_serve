#!/usr/bin/env php
<?php

include(__DIR__ . '/../webdata/init.inc.php');

function error($message)
{
    error_log($message);
}

function main()
{
    if (!getenv('SSH_ORIGINAL_COMMAND')) {
        return error('There is no SSH_ORIGINAL_COMMAND env');
    }

    $view = new Pix_Partial(__DIR__ . '/../webdata/views');

    $command = getenv('SSH_ORIGINAL_COMMAND');
    list($method) = explode(' ', $command, 2);
    switch ($method) {
    case 'init': // init $nodes_count
        $curl = curl_init();
        curl_setopt($curl, CURLOPT_URL, 'http://169.254.169.254/latest/meta-data/local-hostname');
        curl_setopt($curl, CURLOPT_HEADER, 0);
        curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
        if (!$hostname = curl_exec($curl)) {
            trigger_error(curl_error($curl));
        }
        curl_close($curl);

        if (!$hostname) {
            die("local-hostname is not found");
        }

        if (!$ip = gethostbyname($hostname)) {
            die("local-hostname {$hostname} error");
        }

        list(, $nodes_count) = explode(' ', $command, 2);
        $nodes_count = intval($nodes_count);
        if (!$nodes_count) {
            die("invalid nodes_count\n");
        }

        for ($i = 1; $i <= $nodes_count; $i ++) {
            WebNode::insert(array(
                'ip' => ip2long($ip),
                'port' => 20000 + $i,
                'project_id' => 0,
                'commit' => '',
                'created_at' => 0,
                'start_at' => 0,
                'access_at' => 0,
            ));
            exec("cp --preserve=mode,ownership,timestamps --recursive /srv/chroot/template /srv/chroot/{$i}");
            copy('/srv/code/hisoku/config/php.ini', "/srv/chroot/{$i}/etc/php.ini");
            // comment Listen 80
            exec("sed -i 's/^Listen 80$/#Listen 80/' /srv/chroot/{$i}/usr/local/apache2/conf/httpd.conf");
            file_put_contents("/srv/chroot/{$i}/usr/local/apache2/conf/httpd.conf", "\nInclude conf/extra/node.conf\n", FILE_APPEND);
            if (!file_exists("/srv/chroot/{$i}/srv/web")) {
                mkdir("/srv/chroot/{$i}/srv/web");
            }
        }
        break;

    case 'clone':
        list(, $project_name, $id) = explode(' ', getenv('SSH_ORIGINAL_COMMAND'));
        if (!$id) {
            die("invalid $id");
        }
        if (!$project = Project::find_by_name(strval($project_name))) {
            return error('project not found: ' . $project_name);
        }
        if (file_exists("/srv/chroot/{$id}/srv/env.conf")) {
            unlink("/srv/chroot/{$id}/srv/env.conf");
        }
        exec("rm -rf /srv/chroot/{$id}/srv/web");
	mkdir("/srv/chroot/{$id}/srv/web");
        exec("git archive --format=tar --remote=git@" . GIT_SERVER . ":{$project_name}.git master | tar -xf - -C /srv/chroot/{$id}/srv/web");
        $vhost_conf = $view->partial('config/apache-vhost.conf.phtml', array(
            'port' => 20000 + $id,
            'id' => $id,
            'project' => $project,
        ));
        file_put_contents("/srv/chroot/{$id}/usr/local/apache2/conf/extra/node.conf", $vhost_conf);
        $env_conf = $view->partial('config/php-env.phtml', array(
            'project' => $project,
        ));
        file_put_contents("/srv/chroot/{$id}/srv/env.conf", $env_conf);

        break;
    }
    return;
}

main();
